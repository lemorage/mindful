import logging
from typing import (
    Dict,
    List,
    Optional,
)

from pydantic import (
    BaseModel,
    Field,
)

logger = logging.getLogger("mindful")


class TapeMetadata(BaseModel):
    """Structure for Tape metadata generated by the Mindful Agent."""

    category: str = Field(default="", description="A single, broad classification category for the content.")
    context: str = Field(default="", description="Concise situational or thematic context (max ~2-3 sentences).")
    keywords: List[str] = Field(default_factory=list, description="A list of 2-5 relevant keywords.")


class TapeInsight(BaseModel):
    """Represents an agent-inferred insight about a tape, suggesting potential actions or metadata updates."""

    should_archive: bool = Field(default=False, description="True if tape seems redundant/obsolete.")
    updated_metadata: Optional[TapeMetadata] = Field(
        default=None, description="Suggested new metadata if improvements found."
    )
    new_links: Optional[Dict[str, str]] = Field(
        default=None,
        description="Suggested new links from target tape: {neighbor_tape_id: 'description of relationship'}.",
    )
